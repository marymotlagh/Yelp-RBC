package com.RBC.foodnearyou;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URLEncoder;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Random;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;

import android.util.Log;


public class restClient
{
    public enum RequestMethod
    {
        GET,
        POST
    }
    public int responseCode=0;
    public String message;
    public String response;
    public String Execute(RequestMethod method,String url,ArrayList<NameValuePair> headers,ArrayList<NameValuePair> params) throws Exception
    {
        switch (method)
        {
            case GET:
            {
		        String combinedParams = "";
		        if (params!=null)
		        {
		            combinedParams += "?";
		            for (NameValuePair p : params)
		            {
		                String paramString = p.getName() + "=" + URLEncoder.encode(p.getValue(),"UTF-8");
		                if (combinedParams.length() > 1)
		                    combinedParams += "&" + paramString;
		                else
		                    combinedParams += paramString;
		            }
		        }
		        HttpGet request = new HttpGet(url + combinedParams);
		        if (headers!=null)
		        {
		            headers=addCommonHeaderField(headers);
		            for (NameValuePair h : headers)
		                request.addHeader(h.getName(), h.getValue());
		        }
		        executeRequest(request, url);
		        break;
            }
		    case POST:
		    {
		        HttpPost request = new HttpPost(url);
		        // add headers
		            if (headers!=null)
		            {
		                headers=addCommonHeaderField(headers);
		                for (NameValuePair h : headers)
		                    request.addHeader(h.getName(), h.getValue());
		            }
		            if (params!=null)
		                request.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));
		            executeRequest(request, url);
		            break;
		        }
		    }
		return response;
    	}
	private ArrayList<NameValuePair> addCommonHeaderField(ArrayList<NameValuePair> _header)
		{
		    _header.add(new BasicNameValuePair("Content-Type","application/x-www-form-urlencoded"));
		    return _header;
		}
	public ArrayList<NameValuePair> AddParamAuth(ArrayList<NameValuePair> param) throws InvalidKeyException, SignatureException, NoSuchAlgorithmException {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
    	String currentDateandTime = sdf.format(new Date());
    	String randomStr = random(10);
		String signature = HmacSha1Signature.calculateRFC2104HMAC(Constants.CONSUMER_SECRET , Constants.TOKEN_SECRET);
		param.add(new BasicNameValuePair("oauth_consumer_key",Constants.CONSUMER_KEY));
    	param.add(new BasicNameValuePair("oauth_token",Constants.TOKEN));
    	param.add(new BasicNameValuePair("oauth_signature_method","HMAC-SHA1"));
    	param.add(new BasicNameValuePair("oauth_consumer_secret",Constants.CONSUMER_SECRET));
    	param.add(new BasicNameValuePair("oauth_signature", signature));
    	param.add(new BasicNameValuePair("oauth_timestamp",currentDateandTime));
    	param.add(new BasicNameValuePair("oauth_nonce",randomStr));
    	param.add(new BasicNameValuePair("oauth_version","1.0"));
    	return param;
		
	}
	private void executeRequest(HttpUriRequest request, String url)
		{
		    HttpClient client = new DefaultHttpClient();
		    HttpResponse httpResponse;
		    try
		    {
		
		    	
		        httpResponse = client.execute(request);
		        responseCode = httpResponse.getStatusLine().getStatusCode();
		        message = httpResponse.getStatusLine().getReasonPhrase();
		        HttpEntity entity = httpResponse.getEntity();
		
		        if (entity != null)
		        {
		            InputStream instream = entity.getContent();
		            response = convertStreamToString(instream);
		            instream.close();
		        }
		    }
		    catch (Exception e)
		    {
		    	Log.d("Rest", e.toString());	
		    	
		    }
		}

	private static String convertStreamToString(InputStream is)
	{
    BufferedReader reader = new BufferedReader(new InputStreamReader(is));
    StringBuilder sb = new StringBuilder();
    String line = null;
    try
    {
        while ((line = reader.readLine()) != null)
        {
            sb.append(line + "\n");
            }
            is.close();
        }
        catch (IOException e)
        { }
        return sb.toString();
    }
	public static String random(int max) {
	    Random generator = new Random();
	    StringBuilder randomStringBuilder = new StringBuilder();
	    int randomLength = generator.nextInt(max);
	    char tempChar;
	    for (int i = 0; i < randomLength; i++){
	        tempChar = (char) (generator.nextInt(96) + 32);
	        randomStringBuilder.append(tempChar);
	    }
	    return randomStringBuilder.toString();
	}
}

