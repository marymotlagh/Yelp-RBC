package com.RBC.foodnearyou;

import java.util.Arrays;
import java.util.Comparator;

import org.json.JSONArray;
import org.json.JSONObject;
import org.scribe.builder.ServiceBuilder;
import org.scribe.model.OAuthRequest;
import org.scribe.model.Response;
import org.scribe.model.Token;
import org.scribe.model.Verb;
import org.scribe.oauth.OAuthService;

import android.os.AsyncTask;


/*public class Yelp {

  OAuthService service;
  Token accessToken;


  public Yelp(String consumerKey, String consumerSecret, String token, String tokenSecret) {
    this.service = new ServiceBuilder().provider(YelpApi2.class).apiKey(consumerKey).apiSecret(consumerSecret).build();
    this.accessToken = new Token(token, tokenSecret);
  }


  public String search(String term, double latitude, double longitude) {
    OAuthRequest request = new OAuthRequest(Verb.GET, "https://api.yelp.com/v2/search");
    request.addQuerystringParameter("term", term);
    request.addQuerystringParameter("ll", latitude + "," + longitude);
    this.service.signRequest(this.accessToken, request);
    Response response = request.send();
    return response.getBody();
  }

}*/

public class Yelp extends AsyncTask<String, Void , String> {

	  OAuthService service;
	  Token accessToken;
	  String Term;
	  Double latitude;
	  Double longitude;

	  public Yelp(String term,double latitude, double longitude, String consumerKey, String consumerSecret, String token, String tokenSecret) {
	    this.service = new ServiceBuilder().provider(YelpApi2.class).apiKey(consumerKey).apiSecret(consumerSecret).build();
	    this.accessToken = new Token(token, tokenSecret);
	    this.Term = term;
	    this.latitude = latitude;
	    this.longitude = longitude;
	  }
	  
	  protected String doInBackground(String... urls) {
		  Response response = null;
		  try {
			  OAuthRequest request = new OAuthRequest(Verb.GET, "https://api.yelp.com/v2/search");
			  request.addQuerystringParameter("term", Term );
			  request.addQuerystringParameter("ll", latitude + "," + longitude);
			  this.service.signRequest(this.accessToken, request);
			  response = request.send();
		  } catch (Exception e) {
			    e.printStackTrace();
			}
		  if (response != null)
			  return response.getBody();
		  else {
			  sampleResponse resp = new sampleResponse();
			  return resp.response;
		  }
	  }

	  protected void onPostExecute(String response) {
			  	if (response != null) {
					
			  	}
			  	else {
			  		
			  	}
			  	/**
			  	 * parse jSON Response
			  	 */
			  	 try {
			  	Resturant[] restData = new Resturant[10];
			  	sampleResponse resp = new sampleResponse();
			  	JSONObject  jsonRootObject = new JSONObject(resp.response);
					   
				    JSONArray jsonArray = jsonRootObject.optJSONArray("businesses");
				   
				    for(int i=0; i < jsonArray.length(); i++){
					      JSONObject jsonObject = jsonArray.getJSONObject(i);
					      
					      String image_url = jsonObject.optString("image_url").toString();
					      String name = jsonObject.optString("name").toString();
					      String snippet_text = jsonObject.optString("snippet_text").toString();
					      
					      String location = jsonObject.optString("location");
					      JSONObject jsonRootLocation = new JSONObject(location);
					      //String display_address = jsonRootLocation.optString("display_address");
					      
					      JSONArray display_address_ar = jsonRootLocation.optJSONArray("display_address");
					      String address ="";
					      for(int j=0; j < display_address_ar.length(); j++){
					    	  if (address != "") 
					    		  address = address + ", ";
					    	  address = address + display_address_ar.getString(j);
					      }
					      restData[i] = new Resturant();
					      restData[i].setName(name);
					      restData[i].setAddress(address);
					      restData[i].setReviews(snippet_text);
					      restData[i].setImageUrl(image_url);
				    }
			
			  	/**
			  	 * Sort Data by Restaurant Name
			  	 */
					 Arrays.sort(restData, new Comparator<Resturant>() {
						 	@Override
							public int compare(Resturant rest1, Resturant rest2) {
						 		if (rest1!=null)
						 			if (rest2!=null)
						 				return rest1.getName().compareToIgnoreCase(rest2.getName());
						 			else return 1;
						 		else return 1;
							}
					 });
					 
			  		 SearchActivity s = new SearchActivity();
			  		 s.UpdateGrvResturant(restData);
			  			 
			  	} catch (Exception e) {
				    e.printStackTrace();
				}
	  }
	  
	  
	  
	  /*public String search(String term, double latitude, double longitude) {
	    OAuthRequest request = new OAuthRequest(Verb.GET, "https://api.yelp.com/v2/search");
	    request.addQuerystringParameter("term", term);
	    request.addQuerystringParameter("ll", latitude + "," + longitude);
	    this.service.signRequest(this.accessToken, request);
	    Response response = request.send();
	    return response.getBody();
	  }*/

	}

/* public void FindYelp(String SearchKeyword){
	YelpAPI.YelpAPICLI yelpApiCli = new YelpAPI.YelpAPICLI();
	new JCommander(yelpApiCli);
	YelpAPI yelpApi = new YelpAPI(CONSUMER_KEY, CONSUMER_SECRET, TOKEN, TOKEN_SECRET);
	try {
    YelpAPI.queryAPI(yelpApi, yelpApiCli);
	} catch (JSONException e) {
    e.printStackTrace();
	}

new HttpRequestTask().execute();*/
//setUp();
/*  }
public void setUp() {

YelpAPIFactory yelpAPIFactory = new YelpAPIFactory(
        Credential.consumerKey(),
        Credential.consumerSecret(),
        Credential.token(),
        Credential.tokenSecret()

);

yelpAPIFactory = AsyncTestUtils.setToRunInMainThread(yelpAPIFactory);
yelpAPI = yelpAPIFactory.createAPI();
}
public void testSearchByLocationWithOptionalCoordinate() throws IOException {
Map<String, String> params = new HashMap<>();
params.put("term", "yelp");
params.put("cll", "37.7867703362929,-122.399958372115");

Call<SearchResponse> call = yelpAPI.search("Toronto", params);
Response<SearchResponse> response = call.execute();
Assert.assertEquals(200, response.code());

SearchResponse searchResponse = response.body();
Assert.assertNotNull(searchResponse);
}


private class HttpRequestTask extends AsyncTask<Void, Void, Restuatant> {
@Override
protected Restuatant doInBackground(Void... params) {
    try {
        final String url = "https://api.yelp.com/v2/search?term=food";
        RestTemplate restTemplate = new RestTemplate();
        restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());
        Restuatant greeting = restTemplate.getForObject(url, Restuatant.class);
        return greeting;
    } catch (Exception e) {
        Log.e("MainActivity", e.getMessage(), e);
    }

    return null;
}
@Override
protected void onPostExecute(Restuatant resturant) {
    TextView greetingIdText = (TextView) findViewById(R.id.Name);
    TextView greetingContentText = (TextView) findViewById(R.id.Address);
    greetingIdText.setText(resturant.getName());
    greetingContentText.setText(resturant.getAddres());
}

}

*/
