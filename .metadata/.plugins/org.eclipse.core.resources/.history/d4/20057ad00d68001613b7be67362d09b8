package com.RBC.foodnearyou;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import android.os.Message;
import android.util.JsonReader;
import android.util.JsonToken;

public class JsonParser {
	public List<Message> readJsonStream(InputStream in) throws IOException {
	     JsonReader reader = new JsonReader(new InputStreamReader(in, "UTF-8"));
	     try {
	       return readMessagesArray(reader);
	     } finally {
	       reader.close();
	     }
	   }

	   public List<Message> readMessagesArray(JsonReader reader) throws IOException {
	     List<Message> messages = new ArrayList<Message>();

	     reader.beginArray();
	     while (reader.hasNext()) {
	       messages.add(readMessage(reader));
	     }
	     reader.endArray();
	     return messages;
	   }
	   
	   public String readAddressArray(JsonReader reader) throws IOException {
		     String Address = "";

		     reader.beginArray();
		     while (reader.hasNext()) {
		    	 Address= Address + readMessage(reader) + ",";
		     }
		     reader.endArray();
		     return Address;
		   }

	   public Resturant readMessage(JsonReader reader) throws IOException {

	     Resturant rest = new Resturant();

	     reader.beginObject();
	     while (reader.hasNext()) {
	       String name = reader.nextName();
	       if (name.equals("id")) {
	         rest.setId(reader.nextString());
	       } else if (name.equals("image_url")) {
	    	   rest.setImageUrl(reader.nextString());
	       } else if (name.equals("display_address") && reader.peek() != JsonToken.NULL) {
	    	   rest.setAddress(readAddressArray(reader));
	       } else if (name.equals("name")) {
	    	   rest.setName(reader.nextString());
	       } else if (name.equals("snippet_text")) {
	    	   rest.setReviews(reader.nextString());
	       } else {
	         reader.skipValue();
	       }
	     }
	     reader.endObject();
	     return rest;
	   }

	   public List<Double> readDoublesArray(JsonReader reader) throws IOException {
	     List<Double> doubles = new ArrayList<Double>();

	     reader.beginArray();
	     while (reader.hasNext()) {
	       doubles.add(reader.nextDouble());
	     }
	     reader.endArray();
	     return doubles;
	   }

	   public User readUser(JsonReader reader) throws IOException {
	     String username = null;
	     int followersCount = -1;

	     reader.beginObject();
	     while (reader.hasNext()) {
	       String name = reader.nextName();
	       if (name.equals("name")) {
	         username = reader.nextString();
	       } else if (name.equals("followers_count")) {
	         followersCount = reader.nextInt();
	       } else {
	         reader.skipValue();
	       }
	     }
	     reader.endObject();
	     return new User(username, followersCount);
	   }
}
